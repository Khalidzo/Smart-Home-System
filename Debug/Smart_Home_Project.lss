
Smart_Home_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00000db6  00000e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000fe  008000fe  00000ee8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e33  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001238  00000000  00000000  00004047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001947  00000000  00000000  0000527f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  00006bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089f  00000000  00000000  00007178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a90  00000000  00000000  00007a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  000094a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3f       	cpi	r26, 0xFE	; 254
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae ef       	ldi	r26, 0xFE	; 254
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  8a:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendWelcomeMessage>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	86 e7       	ldi	r24, 0x76	; 118
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <sendWelcomeMessage+0x6>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <sendWelcomeMessage+0x10>
  a2:	00 00       	nop
#include <avr/io.h>
#include "HomeDisplay.h"

void sendWelcomeMessage(void) {
	_delay_ms(30);
	LCD_GoTo(0,0);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_GoTo>
	LCD_WriteString("2022/08/18");
  b0:	8c e6       	ldi	r24, 0x6C	; 108
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
  b8:	08 95       	ret

000000ba <displayTemperature>:
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	86 e7       	ldi	r24, 0x76	; 118
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <displayTemperature+0x6>
  c8:	00 c0       	rjmp	.+0      	; 0xca <displayTemperature+0x10>
  ca:	00 00       	nop
}

void displayTemperature(void) {
	_delay_ms(30);
	LCD_GoTo(1,0);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_GoTo>
	LCD_WriteString("Temperature ");
  d8:	87 e7       	ldi	r24, 0x77	; 119
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
	LCD_WriteNumber(TempSensor_Read());
  e0:	0e 94 b4 04 	call	0x968	; 0x968 <TempSensor_Read>
  e4:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_WriteNumber>
	LCD_WriteChar('C');
  e8:	83 e4       	ldi	r24, 0x43	; 67
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteChar>
  f0:	08 95       	ret

000000f2 <main>:
************************************************************************/

int main(void)
{
	/********************_Initializations_*****************/
	Buzzer_Init();
  f2:	0e 94 28 02 	call	0x450	; 0x450 <Buzzer_Init>
	LCD_Init();
  f6:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_Init>
	TWI_Init();
  fa:	0e 94 15 05 	call	0xa2a	; 0xa2a <TWI_Init>
	UART_Init();
  fe:	0e 94 3a 05 	call	0xa74	; 0xa74 <UART_Init>
	DCMotor_Init();
 102:	0e 94 ae 02 	call	0x55c	; 0x55c <DCMotor_Init>
	ServoMotor_Init();
 106:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ServoMotor_Init>
	TempSensor_Init();
 10a:	0e 94 b1 04 	call	0x962	; 0x962 <TempSensor_Init>
	
	
	while(1)
	{	
		sendWelcomeMessage();
 10e:	0e 94 49 00 	call	0x92	; 0x92 <sendWelcomeMessage>
		displayTemperature();
 112:	0e 94 5d 00 	call	0xba	; 0xba <displayTemperature>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	89 e6       	ldi	r24, 0x69	; 105
 11a:	98 e1       	ldi	r25, 0x18	; 24
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x2a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x34>
 126:	00 00       	nop
 128:	f2 cf       	rjmp	.-28     	; 0x10e <main+0x1c>

0000012a <__vector_13>:
	}
}


//UART ISR
ISR(USART_RXC_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	/*Read the data from buffer*/
	UART_RX_VALUE = UDR;
 14c:	8c b1       	in	r24, 0x0c	; 12
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <UART_RX_VALUE+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <UART_RX_VALUE>
	
	switch(UART_RX_VALUE) {
 158:	82 34       	cpi	r24, 0x42	; 66
 15a:	91 05       	cpc	r25, r1
 15c:	51 f0       	breq	.+20     	; 0x172 <__vector_13+0x48>
 15e:	83 34       	cpi	r24, 0x43	; 67
 160:	91 05       	cpc	r25, r1
 162:	59 f0       	breq	.+22     	; 0x17a <__vector_13+0x50>
 164:	81 34       	cpi	r24, 0x41	; 65
 166:	91 05       	cpc	r25, r1
 168:	59 f4       	brne	.+22     	; 0x180 <__vector_13+0x56>
		case 'A':
		//THIS IS USER1 LOGIN
		enterPassword(USER1);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 8f 01 	call	0x31e	; 0x31e <enterPassword>
		break;
 170:	07 c0       	rjmp	.+14     	; 0x180 <__vector_13+0x56>
		case 'B':
		//THIS IS USER2 LOGIN
		enterPassword(USER2);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 8f 01 	call	0x31e	; 0x31e <enterPassword>
		break;
 178:	03 c0       	rjmp	.+6      	; 0x180 <__vector_13+0x56>
		case 'C':
		//THIS IS USER3 LOGIN
		enterPassword(USER3);
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 8f 01 	call	0x31e	; 0x31e <enterPassword>
		break;
		default: break;
	}
	/*Clear the interrupt flag*/
	UCSRA|=(1<<RXC);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8b b9       	out	0x0b, r24	; 11
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <getName>:
		storePassword(userPassword, userPasswordAddressSpace[userNumber-1]);
		break;
		default:
		break;
	}
}
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	e8 2f       	mov	r30, r24
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	e8 59       	subi	r30, 0x98	; 152
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	c0 81       	ld	r28, Z
 1c0:	88 e0       	ldi	r24, 0x08	; 8
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 af 05 	call	0xb5e	; 0xb5e <malloc>
 1c8:	6c 01       	movw	r12, r24
 1ca:	00 e0       	ldi	r16, 0x00	; 0
 1cc:	10 e0       	ldi	r17, 0x00	; 0
 1ce:	18 c0       	rjmp	.+48     	; 0x200 <getName+0x58>
 1d0:	76 01       	movw	r14, r12
 1d2:	e0 0e       	add	r14, r16
 1d4:	f1 1e       	adc	r15, r17
 1d6:	6c 2f       	mov	r22, r28
 1d8:	80 ea       	ldi	r24, 0xA0	; 160
 1da:	0e 94 c0 02 	call	0x580	; 0x580 <EEPROM_ReadByte>
 1de:	f7 01       	movw	r30, r14
 1e0:	80 83       	st	Z, r24
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <getName+0x3e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <getName+0x44>
 1ec:	00 00       	nop
 1ee:	cf 5f       	subi	r28, 0xFF	; 255
 1f0:	0f 5f       	subi	r16, 0xFF	; 255
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
 1f4:	e3 ed       	ldi	r30, 0xD3	; 211
 1f6:	f0 e3       	ldi	r31, 0x30	; 48
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <getName+0x50>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <getName+0x56>
 1fe:	00 00       	nop
 200:	6c 2f       	mov	r22, r28
 202:	80 ea       	ldi	r24, 0xA0	; 160
 204:	0e 94 c0 02 	call	0x580	; 0x580 <EEPROM_ReadByte>
 208:	81 11       	cpse	r24, r1
 20a:	e2 cf       	rjmp	.-60     	; 0x1d0 <getName+0x28>
 20c:	f6 01       	movw	r30, r12
 20e:	e0 0f       	add	r30, r16
 210:	f1 1f       	adc	r31, r17
 212:	10 82       	st	Z, r1
 214:	c6 01       	movw	r24, r12
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	df 90       	pop	r13
 222:	cf 90       	pop	r12
 224:	08 95       	ret

00000226 <getPassword>:
	_delay_ms(50);
	EEPROM_WriteByte(deviceAddress,memoryAddress, '\0'); //Terminate string
	_delay_ms(50);
}

u8* getPassword(u8 userNumber) {
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	u8 memoryAddress = userPasswordAddressSpace[userNumber-1];
 234:	e8 2f       	mov	r30, r24
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	eb 59       	subi	r30, 0x9B	; 155
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	10 81       	ld	r17, Z
	u8 deviceAddress = 0xA0;
	u8* tmp  = (char*)(malloc(sizeof(char) * 8));
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 af 05 	call	0xb5e	; 0xb5e <malloc>
 246:	6c 01       	movw	r12, r24
	u8* password = tmp;
	int i=0;
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
	while(EEPROM_ReadByte(deviceAddress,memoryAddress) != '\0') {
 24c:	1a c0       	rjmp	.+52     	; 0x282 <getPassword+0x5c>
		tmp[i] = EEPROM_ReadByte(deviceAddress,memoryAddress);
 24e:	76 01       	movw	r14, r12
 250:	ec 0e       	add	r14, r28
 252:	fd 1e       	adc	r15, r29
 254:	61 2f       	mov	r22, r17
 256:	80 ea       	ldi	r24, 0xA0	; 160
 258:	0e 94 c0 02 	call	0x580	; 0x580 <EEPROM_ReadByte>
 25c:	f7 01       	movw	r30, r14
 25e:	80 83       	st	Z, r24
 260:	83 ed       	ldi	r24, 0xD3	; 211
 262:	90 e3       	ldi	r25, 0x30	; 48
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <getPassword+0x3e>
 268:	00 c0       	rjmp	.+0      	; 0x26a <getPassword+0x44>
 26a:	00 00       	nop
		_delay_ms(50);
		memoryAddress++;
 26c:	1f 5f       	subi	r17, 0xFF	; 255
		i++;
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	e3 ed       	ldi	r30, 0xD3	; 211
 272:	f0 e3       	ldi	r31, 0x30	; 48
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <getPassword+0x4e>
 278:	00 c0       	rjmp	.+0      	; 0x27a <getPassword+0x54>
 27a:	00 00       	nop
		_delay_ms(50);
		if(i == 4) break;
 27c:	c4 30       	cpi	r28, 0x04	; 4
 27e:	d1 05       	cpc	r29, r1
 280:	31 f0       	breq	.+12     	; 0x28e <getPassword+0x68>
	u8 memoryAddress = userPasswordAddressSpace[userNumber-1];
	u8 deviceAddress = 0xA0;
	u8* tmp  = (char*)(malloc(sizeof(char) * 8));
	u8* password = tmp;
	int i=0;
	while(EEPROM_ReadByte(deviceAddress,memoryAddress) != '\0') {
 282:	61 2f       	mov	r22, r17
 284:	80 ea       	ldi	r24, 0xA0	; 160
 286:	0e 94 c0 02 	call	0x580	; 0x580 <EEPROM_ReadByte>
 28a:	81 11       	cpse	r24, r1
 28c:	e0 cf       	rjmp	.-64     	; 0x24e <getPassword+0x28>
		memoryAddress++;
		i++;
		_delay_ms(50);
		if(i == 4) break;
	}
	tmp[i] = '\0';
 28e:	cc 0d       	add	r28, r12
 290:	dd 1d       	adc	r29, r13
 292:	18 82       	st	Y, r1
	return password;
}
 294:	c6 01       	movw	r24, r12
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <receivePassword>:
	}
}



u8* receivePassword(void) {
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	u8 counter = 0;
	u8* tmpPassowrd  = (char*)(malloc(sizeof(char) * 5));
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 af 05 	call	0xb5e	; 0xb5e <malloc>
 2b8:	f8 2e       	mov	r15, r24
 2ba:	d9 2f       	mov	r29, r25
	u8* password = tmpPassowrd;
	u8 rChar;
	LCD_WriteString("Enter password:");
 2bc:	84 e8       	ldi	r24, 0x84	; 132
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>



u8* receivePassword(void) {
	u8 counter = 0;
	u8* tmpPassowrd  = (char*)(malloc(sizeof(char) * 5));
 2c4:	0f 2d       	mov	r16, r15
 2c6:	1d 2f       	mov	r17, r29
}



u8* receivePassword(void) {
	u8 counter = 0;
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
	u8* tmpPassowrd  = (char*)(malloc(sizeof(char) * 5));
	u8* password = tmpPassowrd;
	u8 rChar;
	LCD_WriteString("Enter password:");
	while(counter != 4) {
 2ca:	1d c0       	rjmp	.+58     	; 0x306 <receivePassword+0x60>
		
		rChar = Bluetooth_Receive();
 2cc:	0e 94 24 02 	call	0x448	; 0x448 <Bluetooth_Receive>
 2d0:	e9 e6       	ldi	r30, 0x69	; 105
 2d2:	f8 e1       	ldi	r31, 0x18	; 24
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <receivePassword+0x2e>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <receivePassword+0x34>
 2da:	00 00       	nop
		_delay_ms(25);
		if(rChar >= 48 && rChar <= 57) {
 2dc:	90 ed       	ldi	r25, 0xD0	; 208
 2de:	98 0f       	add	r25, r24
 2e0:	9a 30       	cpi	r25, 0x0A	; 10
 2e2:	88 f4       	brcc	.+34     	; 0x306 <receivePassword+0x60>
 2e4:	e9 e6       	ldi	r30, 0x69	; 105
 2e6:	f8 e1       	ldi	r31, 0x18	; 24
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <receivePassword+0x42>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <receivePassword+0x48>
 2ee:	00 00       	nop
			_delay_ms(25);
			*tmpPassowrd = rChar;
 2f0:	f8 01       	movw	r30, r16
 2f2:	81 93       	st	Z+, r24
 2f4:	8f 01       	movw	r16, r30
			LCD_GoTo(1,counter);
 2f6:	6c 2f       	mov	r22, r28
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_GoTo>
			LCD_WriteChar('*');
 2fe:	8a e2       	ldi	r24, 0x2A	; 42
 300:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteChar>
			tmpPassowrd++;
			counter++;
 304:	cf 5f       	subi	r28, 0xFF	; 255
	u8 counter = 0;
	u8* tmpPassowrd  = (char*)(malloc(sizeof(char) * 5));
	u8* password = tmpPassowrd;
	u8 rChar;
	LCD_WriteString("Enter password:");
	while(counter != 4) {
 306:	c4 30       	cpi	r28, 0x04	; 4
 308:	09 f7       	brne	.-62     	; 0x2cc <receivePassword+0x26>
			LCD_WriteChar('*');
			tmpPassowrd++;
			counter++;
		}
	}
	*tmpPassowrd = '\0';
 30a:	f8 01       	movw	r30, r16
 30c:	10 82       	st	Z, r1
	return password;
 30e:	8f 2d       	mov	r24, r15
 310:	9d 2f       	mov	r25, r29
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	08 95       	ret

0000031e <enterPassword>:
	}
	tmp[i] = '\0';
	return password;
}

void enterPassword(u8 userNumber) {
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	c8 2f       	mov	r28, r24
	LCD_WriteString("Welcome ");
 326:	84 e9       	ldi	r24, 0x94	; 148
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
	LCD_WriteString(getName(userNumber));
 32e:	8c 2f       	mov	r24, r28
 330:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getName>
 334:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
 338:	2f ed       	ldi	r18, 0xDF	; 223
 33a:	83 e9       	ldi	r24, 0x93	; 147
 33c:	94 e0       	ldi	r25, 0x04	; 4
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <enterPassword+0x20>
 346:	00 c0       	rjmp	.+0      	; 0x348 <enterPassword+0x2a>
 348:	00 00       	nop
	_delay_ms(1500);
	LCD_Clear();
 34a:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
	u8 nTrials = 0;
	u8* password = getPassword(userNumber);
 34e:	8c 2f       	mov	r24, r28
 350:	0e 94 13 01 	call	0x226	; 0x226 <getPassword>
	u8* currentPassword = receivePassword();
 354:	0e 94 53 01 	call	0x2a6	; 0x2a6 <receivePassword>
 358:	8c 01       	movw	r16, r24
	u8 counter = 0;
	while(strcmp(getPassword(userNumber), currentPassword) != 0) {
 35a:	8c 2f       	mov	r24, r28
 35c:	0e 94 13 01 	call	0x226	; 0x226 <getPassword>
 360:	b8 01       	movw	r22, r16
 362:	0e 94 d0 06 	call	0xda0	; 0xda0 <strcmp>
 366:	89 2b       	or	r24, r25
 368:	91 f1       	breq	.+100    	; 0x3ce <enterPassword+0xb0>
		LCD_Clear();
 36a:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
		LCD_WriteString("Wrong Password");
 36e:	8d e9       	ldi	r24, 0x9D	; 157
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
		Blutooth_SendString("Wrong Password");
 376:	8d e9       	ldi	r24, 0x9D	; 157
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 11 02 	call	0x422	; 0x422 <Blutooth_SendString>
		Bluetooth_SendByte('\n');
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	0e 94 0e 02 	call	0x41c	; 0x41c <Bluetooth_SendByte>
 384:	2f ed       	ldi	r18, 0xDF	; 223
 386:	83 e9       	ldi	r24, 0x93	; 147
 388:	94 e0       	ldi	r25, 0x04	; 4
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <enterPassword+0x6c>
 392:	00 c0       	rjmp	.+0      	; 0x394 <enterPassword+0x76>
 394:	00 00       	nop
		_delay_ms(1500);
		LCD_Clear();
 396:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
		LCD_WriteString("Try again!");
 39a:	8c ea       	ldi	r24, 0xAC	; 172
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
		Blutooth_SendString("Try again!");
 3a2:	8c ea       	ldi	r24, 0xAC	; 172
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 11 02 	call	0x422	; 0x422 <Blutooth_SendString>
		Bluetooth_SendByte('\n');
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	0e 94 0e 02 	call	0x41c	; 0x41c <Bluetooth_SendByte>
 3b0:	2f e3       	ldi	r18, 0x3F	; 63
 3b2:	8d e0       	ldi	r24, 0x0D	; 13
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <enterPassword+0x98>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <enterPassword+0xa2>
 3c0:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
 3c2:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
		currentPassword = receivePassword();
 3c6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <receivePassword>
		nTrials++;
		if(nTrials >= 0) {
			Buzzer_SetAlarm();
 3ca:	0e 94 3c 02 	call	0x478	; 0x478 <Buzzer_SetAlarm>
			break;
		}
	}
	if(nTrials < 2) {
		LCD_Clear();
 3ce:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
		LCD_WriteString("Welcome home!");
 3d2:	87 eb       	ldi	r24, 0xB7	; 183
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
		Blutooth_SendString("Welcome!");
 3da:	85 ec       	ldi	r24, 0xC5	; 197
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 11 02 	call	0x422	; 0x422 <Blutooth_SendString>
		Bluetooth_SendByte('\n');
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	0e 94 0e 02 	call	0x41c	; 0x41c <Bluetooth_SendByte>
		Blutooth_SendString("The door is open");
 3e8:	8e ec       	ldi	r24, 0xCE	; 206
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 11 02 	call	0x422	; 0x422 <Blutooth_SendString>
		Bluetooth_SendByte('\n');
 3f0:	8a e0       	ldi	r24, 0x0A	; 10
 3f2:	0e 94 0e 02 	call	0x41c	; 0x41c <Bluetooth_SendByte>
		Buzzer_Beep();
 3f6:	0e 94 2c 02 	call	0x458	; 0x458 <Buzzer_Beep>
		ServoMotor_OpenDoor();
 3fa:	0e 94 8c 04 	call	0x918	; 0x918 <ServoMotor_OpenDoor>
 3fe:	2f ed       	ldi	r18, 0xDF	; 223
 400:	83 e9       	ldi	r24, 0x93	; 147
 402:	94 e0       	ldi	r25, 0x04	; 4
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		_delay_ms(1500);
		LCD_Clear();
 410:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
	}
}
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <Bluetooth_SendByte>:
void Bluetooth_Init(void) {
	UART_Init();
}

void Bluetooth_SendByte(u8 data) {
	UART_Transmit(data);
 41c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_Transmit>
 420:	08 95       	ret

00000422 <Blutooth_SendString>:
}

void Blutooth_SendString(char* string) {
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	ec 01       	movw	r28, r24
	while(*string != '\0') {
 428:	09 c0       	rjmp	.+18     	; 0x43c <Blutooth_SendString+0x1a>
		UART_Transmit(*string);
 42a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_Transmit>
		string++;
 42e:	21 96       	adiw	r28, 0x01	; 1
 430:	87 e8       	ldi	r24, 0x87	; 135
 432:	93 e1       	ldi	r25, 0x13	; 19
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <Blutooth_SendString+0x12>
 438:	00 c0       	rjmp	.+0      	; 0x43a <Blutooth_SendString+0x18>
 43a:	00 00       	nop
void Bluetooth_SendByte(u8 data) {
	UART_Transmit(data);
}

void Blutooth_SendString(char* string) {
	while(*string != '\0') {
 43c:	88 81       	ld	r24, Y
 43e:	81 11       	cpse	r24, r1
 440:	f4 cf       	rjmp	.-24     	; 0x42a <Blutooth_SendString+0x8>
		UART_Transmit(*string);
		string++;
		_delay_ms(20);
	}
}
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <Bluetooth_Receive>:
u8 Bluetooth_Receive(void) {
	while(READ_BIT(UCSRA,7) == 0);
 448:	5f 9b       	sbis	0x0b, 7	; 11
 44a:	fe cf       	rjmp	.-4      	; 0x448 <Bluetooth_Receive>
	return UDR;
 44c:	8c b1       	in	r24, 0x0c	; 12
 44e:	08 95       	ret

00000450 <Buzzer_Init>:


#include "Buzzer.h"

void Buzzer_Init(void){
	SET_BIT(BUZZER_DIR,BUZZER_PIN);
 450:	8a b3       	in	r24, 0x1a	; 26
 452:	88 60       	ori	r24, 0x08	; 8
 454:	8a bb       	out	0x1a, r24	; 26
 456:	08 95       	ret

00000458 <Buzzer_Beep>:
}
void Buzzer_Beep(void){
	SET_BIT(BUZZER_PORT,BUZZER_PIN);
 458:	8b b3       	in	r24, 0x1b	; 27
 45a:	88 60       	ori	r24, 0x08	; 8
 45c:	8b bb       	out	0x1b, r24	; 27
 45e:	2f e9       	ldi	r18, 0x9F	; 159
 460:	86 e8       	ldi	r24, 0x86	; 134
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	21 50       	subi	r18, 0x01	; 1
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <Buzzer_Beep+0xc>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <Buzzer_Beep+0x16>
 46e:	00 00       	nop
	_delay_ms(500);
	CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);
 470:	8b b3       	in	r24, 0x1b	; 27
 472:	87 7f       	andi	r24, 0xF7	; 247
 474:	8b bb       	out	0x1b, r24	; 27
 476:	08 95       	ret

00000478 <Buzzer_SetAlarm>:
}
void Buzzer_SetAlarm(void){
	LCD_Clear();
 478:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
 47c:	2f e7       	ldi	r18, 0x7F	; 127
 47e:	8a e1       	ldi	r24, 0x1A	; 26
 480:	96 e0       	ldi	r25, 0x06	; 6
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <Buzzer_SetAlarm+0xa>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <Buzzer_SetAlarm+0x14>
 48c:	00 00       	nop
	_delay_ms(2000);
	LCD_WriteString("Login Failure");
 48e:	8f ed       	ldi	r24, 0xDF	; 223
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
 496:	2f e7       	ldi	r18, 0x7F	; 127
 498:	8a e1       	ldi	r24, 0x1A	; 26
 49a:	96 e0       	ldi	r25, 0x06	; 6
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <Buzzer_SetAlarm+0x24>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <Buzzer_SetAlarm+0x2e>
 4a6:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 4a8:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
	LCD_WriteString("System Alarm ON!");
 4ac:	8d ee       	ldi	r24, 0xED	; 237
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_WriteString>
 4b4:	2f ed       	ldi	r18, 0xDF	; 223
 4b6:	83 e9       	ldi	r24, 0x93	; 147
 4b8:	94 e0       	ldi	r25, 0x04	; 4
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <Buzzer_SetAlarm+0x42>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <Buzzer_SetAlarm+0x4c>
 4c4:	00 00       	nop
	_delay_ms(1500);
	LCD_Clear();
 4c6:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_Clear>
	
	SET_BIT(BUZZER_PORT,BUZZER_PIN);
 4ca:	8b b3       	in	r24, 0x1b	; 27
 4cc:	88 60       	ori	r24, 0x08	; 8
 4ce:	8b bb       	out	0x1b, r24	; 27
 4d0:	2f e3       	ldi	r18, 0x3F	; 63
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	93 e0       	ldi	r25, 0x03	; 3
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <Buzzer_SetAlarm+0x5e>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <Buzzer_SetAlarm+0x68>
 4e0:	00 00       	nop
	_delay_ms(1000);
	CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);
 4e2:	8b b3       	in	r24, 0x1b	; 27
 4e4:	87 7f       	andi	r24, 0xF7	; 247
 4e6:	8b bb       	out	0x1b, r24	; 27
 4e8:	2f e9       	ldi	r18, 0x9F	; 159
 4ea:	86 e8       	ldi	r24, 0x86	; 134
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <Buzzer_SetAlarm+0x76>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <Buzzer_SetAlarm+0x80>
 4f8:	00 00       	nop
	_delay_ms(500);
	
	SET_BIT(BUZZER_PORT,BUZZER_PIN);
 4fa:	8b b3       	in	r24, 0x1b	; 27
 4fc:	88 60       	ori	r24, 0x08	; 8
 4fe:	8b bb       	out	0x1b, r24	; 27
 500:	2f e3       	ldi	r18, 0x3F	; 63
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	93 e0       	ldi	r25, 0x03	; 3
 506:	21 50       	subi	r18, 0x01	; 1
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	90 40       	sbci	r25, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <Buzzer_SetAlarm+0x8e>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <Buzzer_SetAlarm+0x98>
 510:	00 00       	nop
	_delay_ms(1000);
	CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);
 512:	8b b3       	in	r24, 0x1b	; 27
 514:	87 7f       	andi	r24, 0xF7	; 247
 516:	8b bb       	out	0x1b, r24	; 27
 518:	2f e9       	ldi	r18, 0x9F	; 159
 51a:	86 e8       	ldi	r24, 0x86	; 134
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	80 40       	sbci	r24, 0x00	; 0
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <Buzzer_SetAlarm+0xa6>
 526:	00 c0       	rjmp	.+0      	; 0x528 <Buzzer_SetAlarm+0xb0>
 528:	00 00       	nop
	_delay_ms(500);
	
	SET_BIT(BUZZER_PORT,BUZZER_PIN);
 52a:	8b b3       	in	r24, 0x1b	; 27
 52c:	88 60       	ori	r24, 0x08	; 8
 52e:	8b bb       	out	0x1b, r24	; 27
 530:	2f e3       	ldi	r18, 0x3F	; 63
 532:	8d e0       	ldi	r24, 0x0D	; 13
 534:	93 e0       	ldi	r25, 0x03	; 3
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <Buzzer_SetAlarm+0xbe>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <Buzzer_SetAlarm+0xc8>
 540:	00 00       	nop
	_delay_ms(1000);
	CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);
 542:	8b b3       	in	r24, 0x1b	; 27
 544:	87 7f       	andi	r24, 0xF7	; 247
 546:	8b bb       	out	0x1b, r24	; 27
 548:	2f e9       	ldi	r18, 0x9F	; 159
 54a:	86 e8       	ldi	r24, 0x86	; 134
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	21 50       	subi	r18, 0x01	; 1
 550:	80 40       	sbci	r24, 0x00	; 0
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <Buzzer_SetAlarm+0xd6>
 556:	00 c0       	rjmp	.+0      	; 0x558 <Buzzer_SetAlarm+0xe0>
 558:	00 00       	nop
 55a:	08 95       	ret

0000055c <DCMotor_Init>:

#include "DCMotor.h"

void DCMotor_Init(void){
	//Set pin direction
	SET_BIT(DC_MOTOR_CONTROL_PORT_D, ENABLE_PIN);
 55c:	81 b3       	in	r24, 0x11	; 17
 55e:	80 61       	ori	r24, 0x10	; 16
 560:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DC_MOTOR_DIRECTION_PORT_D, DIRECTION_PIN);
 562:	84 b3       	in	r24, 0x14	; 20
 564:	88 60       	ori	r24, 0x08	; 8
 566:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DC_MOTOR_DIRECTION_PORT_C, DIRECTION_PIN);
 568:	85 b3       	in	r24, 0x15	; 21
 56a:	88 60       	ori	r24, 0x08	; 8
 56c:	85 bb       	out	0x15, r24	; 21
 56e:	08 95       	ret

00000570 <DCMotor_Start>:
}
void DCMotor_Start(void){
	//SET Enable
	SET_BIT(DC_MOTOR_CONTROL_PORT_C, ENABLE_PIN);
 570:	82 b3       	in	r24, 0x12	; 18
 572:	80 61       	ori	r24, 0x10	; 16
 574:	82 bb       	out	0x12, r24	; 18
 576:	08 95       	ret

00000578 <DCMotor_Stop>:
}
void DCMotor_Stop(void){
	//Clear Enable
	CLEAR_BIT(DC_MOTOR_CONTROL_PORT_C, ENABLE_PIN);	
 578:	82 b3       	in	r24, 0x12	; 18
 57a:	8f 7e       	andi	r24, 0xEF	; 239
 57c:	82 bb       	out	0x12, r24	; 18
 57e:	08 95       	ret

00000580 <EEPROM_ReadByte>:
			}
		}
	}
}

u8 EEPROM_ReadByte(u8 DeviceAddress, u8 WordAddress){
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	1f 92       	push	r1
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	f6 2e       	mov	r15, r22
	u8 wDeviceAdd = DeviceAddress & 0xFE;
 592:	08 2f       	mov	r16, r24
 594:	0e 7f       	andi	r16, 0xFE	; 254
	u8 rDeviceAdd = DeviceAddress | (1<<0);
 596:	18 2f       	mov	r17, r24
 598:	11 60       	ori	r17, 0x01	; 1
	u8 rxData = 0;
 59a:	19 82       	std	Y+1, r1	; 0x01
	if(TWI_Send_StartBit() == 0x08){
 59c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TWI_Send_StartBit>
 5a0:	08 97       	sbiw	r24, 0x08	; 8
 5a2:	01 f5       	brne	.+64     	; 0x5e4 <EEPROM_ReadByte+0x64>
		if(TWI_Send_Byte(wDeviceAdd) == 0x18){
 5a4:	80 2f       	mov	r24, r16
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 26 05 	call	0xa4c	; 0xa4c <TWI_Send_Byte>
 5ac:	48 97       	sbiw	r24, 0x18	; 24
 5ae:	d1 f4       	brne	.+52     	; 0x5e4 <EEPROM_ReadByte+0x64>
			if(TWI_Send_Byte(WordAddress) == 0x28){
 5b0:	8f 2d       	mov	r24, r15
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 26 05 	call	0xa4c	; 0xa4c <TWI_Send_Byte>
 5b8:	88 97       	sbiw	r24, 0x28	; 40
 5ba:	a1 f4       	brne	.+40     	; 0x5e4 <EEPROM_ReadByte+0x64>
				if(TWI_Send_StartBit() == 0x10){
 5bc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TWI_Send_StartBit>
 5c0:	40 97       	sbiw	r24, 0x10	; 16
 5c2:	81 f4       	brne	.+32     	; 0x5e4 <EEPROM_ReadByte+0x64>
					if(TWI_Send_Byte(rDeviceAdd) == 0x40) {
 5c4:	81 2f       	mov	r24, r17
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 26 05 	call	0xa4c	; 0xa4c <TWI_Send_Byte>
 5cc:	80 34       	cpi	r24, 0x40	; 64
 5ce:	91 05       	cpc	r25, r1
 5d0:	49 f4       	brne	.+18     	; 0x5e4 <EEPROM_ReadByte+0x64>
						if(TWI_Read_NAck(&rxData) == 0x58){
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <TWI_Read_NAck>
 5da:	88 35       	cpi	r24, 0x58	; 88
 5dc:	91 05       	cpc	r25, r1
 5de:	11 f4       	brne	.+4      	; 0x5e4 <EEPROM_ReadByte+0x64>
							TWI_Send_StopBit();
 5e0:	0e 94 18 05 	call	0xa30	; 0xa30 <TWI_Send_StopBit>
				}
			}
		}
	}
	return rxData;
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	ff 90       	pop	r15
 5f2:	08 95       	ret

000005f4 <LCD_WriteChar>:
	LCD_WriteCommand(LCD_RETURN_HOME);
}

void LCD_WriteChar(u8 Char) {
	
	PORTB |= 1<<1; //RS HIGH
 5f4:	98 b3       	in	r25, 0x18	; 24
 5f6:	92 60       	ori	r25, 0x02	; 2
 5f8:	98 bb       	out	0x18, r25	; 24
	PORTA = (Char & 0xF0) | (PORTA & 0x0F);
 5fa:	9b b3       	in	r25, 0x1b	; 27
 5fc:	28 2f       	mov	r18, r24
 5fe:	20 7f       	andi	r18, 0xF0	; 240
 600:	9f 70       	andi	r25, 0x0F	; 15
 602:	92 2b       	or	r25, r18
 604:	9b bb       	out	0x1b, r25	; 27
	PORTB |= 1<<3; //ENABLE HIGH
 606:	98 b3       	in	r25, 0x18	; 24
 608:	98 60       	ori	r25, 0x08	; 8
 60a:	98 bb       	out	0x18, r25	; 24
 60c:	ef e3       	ldi	r30, 0x3F	; 63
 60e:	ff e1       	ldi	r31, 0x1F	; 31
 610:	31 97       	sbiw	r30, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <LCD_WriteChar+0x1c>
 614:	00 c0       	rjmp	.+0      	; 0x616 <LCD_WriteChar+0x22>
 616:	00 00       	nop
	_delay_ms(2);
	PORTB &= ~(1<<3); //ENABLE LOW
 618:	98 b3       	in	r25, 0x18	; 24
 61a:	97 7f       	andi	r25, 0xF7	; 247
 61c:	98 bb       	out	0x18, r25	; 24
 61e:	ef e1       	ldi	r30, 0x1F	; 31
 620:	fe e4       	ldi	r31, 0x4E	; 78
 622:	31 97       	sbiw	r30, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <LCD_WriteChar+0x2e>
 626:	00 c0       	rjmp	.+0      	; 0x628 <LCD_WriteChar+0x34>
 628:	00 00       	nop
	_delay_ms(5);
	PORTA = (Char << 4) | (PORTA & 0x0F);
 62a:	f0 e1       	ldi	r31, 0x10	; 16
 62c:	8f 9f       	mul	r24, r31
 62e:	c0 01       	movw	r24, r0
 630:	11 24       	eor	r1, r1
 632:	9b b3       	in	r25, 0x1b	; 27
 634:	9f 70       	andi	r25, 0x0F	; 15
 636:	89 2b       	or	r24, r25
 638:	8b bb       	out	0x1b, r24	; 27
	PORTB |= 1<<3; //ENABLE HIGH
 63a:	88 b3       	in	r24, 0x18	; 24
 63c:	88 60       	ori	r24, 0x08	; 8
 63e:	88 bb       	out	0x18, r24	; 24
 640:	8f e3       	ldi	r24, 0x3F	; 63
 642:	9f e1       	ldi	r25, 0x1F	; 31
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <LCD_WriteChar+0x50>
 648:	00 c0       	rjmp	.+0      	; 0x64a <LCD_WriteChar+0x56>
 64a:	00 00       	nop
	_delay_ms(2);
	PORTB &= ~(1<<3); //ENABLE LOW
 64c:	88 b3       	in	r24, 0x18	; 24
 64e:	87 7f       	andi	r24, 0xF7	; 247
 650:	88 bb       	out	0x18, r24	; 24
 652:	ef e1       	ldi	r30, 0x1F	; 31
 654:	fe e4       	ldi	r31, 0x4E	; 78
 656:	31 97       	sbiw	r30, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <LCD_WriteChar+0x62>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_WriteChar+0x68>
 65c:	00 00       	nop
 65e:	08 95       	ret

00000660 <LCD_WriteCommand>:
	_delay_ms(5);
	
}
void LCD_WriteCommand(u8 Command) {
	
	PORTB &= ~(1<<1); //RS LOW
 660:	98 b3       	in	r25, 0x18	; 24
 662:	9d 7f       	andi	r25, 0xFD	; 253
 664:	98 bb       	out	0x18, r25	; 24
	PORTA = (Command & 0xF0) | (PORTA & 0x0F);
 666:	9b b3       	in	r25, 0x1b	; 27
 668:	28 2f       	mov	r18, r24
 66a:	20 7f       	andi	r18, 0xF0	; 240
 66c:	9f 70       	andi	r25, 0x0F	; 15
 66e:	92 2b       	or	r25, r18
 670:	9b bb       	out	0x1b, r25	; 27
	PORTB |= 1<<3; //ENABLE HIGH
 672:	98 b3       	in	r25, 0x18	; 24
 674:	98 60       	ori	r25, 0x08	; 8
 676:	98 bb       	out	0x18, r25	; 24
 678:	ef e3       	ldi	r30, 0x3F	; 63
 67a:	ff e1       	ldi	r31, 0x1F	; 31
 67c:	31 97       	sbiw	r30, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <LCD_WriteCommand+0x1c>
 680:	00 c0       	rjmp	.+0      	; 0x682 <LCD_WriteCommand+0x22>
 682:	00 00       	nop
	_delay_ms(2);
	PORTB &= ~(1<<3); //ENABLE LOW
 684:	98 b3       	in	r25, 0x18	; 24
 686:	97 7f       	andi	r25, 0xF7	; 247
 688:	98 bb       	out	0x18, r25	; 24
 68a:	ef e1       	ldi	r30, 0x1F	; 31
 68c:	fe e4       	ldi	r31, 0x4E	; 78
 68e:	31 97       	sbiw	r30, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <LCD_WriteCommand+0x2e>
 692:	00 c0       	rjmp	.+0      	; 0x694 <LCD_WriteCommand+0x34>
 694:	00 00       	nop
	_delay_ms(5);
	PORTA = (Command << 4) | (PORTA & 0x0F);
 696:	f0 e1       	ldi	r31, 0x10	; 16
 698:	8f 9f       	mul	r24, r31
 69a:	c0 01       	movw	r24, r0
 69c:	11 24       	eor	r1, r1
 69e:	9b b3       	in	r25, 0x1b	; 27
 6a0:	9f 70       	andi	r25, 0x0F	; 15
 6a2:	89 2b       	or	r24, r25
 6a4:	8b bb       	out	0x1b, r24	; 27
	PORTB |= 1<<3; //ENABLE HIGH
 6a6:	88 b3       	in	r24, 0x18	; 24
 6a8:	88 60       	ori	r24, 0x08	; 8
 6aa:	88 bb       	out	0x18, r24	; 24
 6ac:	8f e3       	ldi	r24, 0x3F	; 63
 6ae:	9f e1       	ldi	r25, 0x1F	; 31
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <LCD_WriteCommand+0x50>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <LCD_WriteCommand+0x56>
 6b6:	00 00       	nop
	_delay_ms(2);
	PORTB &= ~(1<<3); //ENABLE LOW
 6b8:	88 b3       	in	r24, 0x18	; 24
 6ba:	87 7f       	andi	r24, 0xF7	; 247
 6bc:	88 bb       	out	0x18, r24	; 24
 6be:	ef e1       	ldi	r30, 0x1F	; 31
 6c0:	fe e4       	ldi	r31, 0x4E	; 78
 6c2:	31 97       	sbiw	r30, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <LCD_WriteCommand+0x62>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_WriteCommand+0x68>
 6c8:	00 00       	nop
 6ca:	08 95       	ret

000006cc <LCD_Init>:

#include "LCD.h"

void LCD_Init(void) {
	
	DDRA |= 0xF0; //PA4 -> PA7
 6cc:	8a b3       	in	r24, 0x1a	; 26
 6ce:	80 6f       	ori	r24, 0xF0	; 240
 6d0:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0x0E; //PB1 -> PB3
 6d2:	87 b3       	in	r24, 0x17	; 23
 6d4:	8e 60       	ori	r24, 0x0E	; 14
 6d6:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<2); //RW LOW
 6d8:	88 b3       	in	r24, 0x18	; 24
 6da:	8b 7f       	andi	r24, 0xFB	; 251
 6dc:	88 bb       	out	0x18, r24	; 24
 6de:	2f ef       	ldi	r18, 0xFF	; 255
 6e0:	84 e3       	ldi	r24, 0x34	; 52
 6e2:	9c e0       	ldi	r25, 0x0C	; 12
 6e4:	21 50       	subi	r18, 0x01	; 1
 6e6:	80 40       	sbci	r24, 0x00	; 0
 6e8:	90 40       	sbci	r25, 0x00	; 0
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <LCD_Init+0x18>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <LCD_Init+0x22>
 6ee:	00 00       	nop
	_delay_ms(250);
	
	LCD_WriteCommand(0x33);
 6f0:	83 e3       	ldi	r24, 0x33	; 51
 6f2:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
 6f6:	82 e3       	ldi	r24, 0x32	; 50
 6f8:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
 6fc:	88 e2       	ldi	r24, 0x28	; 40
 6fe:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
	
	LCD_WriteCommand(LCD_4_BIT_MODE);
 702:	88 e2       	ldi	r24, 0x28	; 40
 704:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
	LCD_WriteCommand(DISPLAY_ON_CURSOR_OFF);
 708:	8c e0       	ldi	r24, 0x0C	; 12
 70a:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_CLEAR);
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_RETURN_HOME);
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
 71a:	08 95       	ret

0000071c <LCD_WriteString>:
	PORTB |= 1<<3; //ENABLE HIGH
	_delay_ms(2);
	PORTB &= ~(1<<3); //ENABLE LOW
	_delay_ms(5);
}
void LCD_WriteString(u8* String) {
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	ec 01       	movw	r28, r24
	while(*String != '\0') {
 722:	03 c0       	rjmp	.+6      	; 0x72a <LCD_WriteString+0xe>
		LCD_WriteChar(*String);
 724:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteChar>
		String++;
 728:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(2);
	PORTB &= ~(1<<3); //ENABLE LOW
	_delay_ms(5);
}
void LCD_WriteString(u8* String) {
	while(*String != '\0') {
 72a:	88 81       	ld	r24, Y
 72c:	81 11       	cpse	r24, r1
 72e:	fa cf       	rjmp	.-12     	; 0x724 <LCD_WriteString+0x8>
		LCD_WriteChar(*String);
		String++;
	}
};
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <LCD_WriteNumber>:

void LCD_WriteNumber(int number) {
 736:	ef 92       	push	r14
 738:	ff 92       	push	r15
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
 746:	64 97       	sbiw	r28, 0x14	; 20
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	f8 94       	cli
 74c:	de bf       	out	0x3e, r29	; 62
 74e:	0f be       	out	0x3f, r0	; 63
 750:	cd bf       	out	0x3d, r28	; 61
 752:	7c 01       	movw	r14, r24
	int length = 0;
	int arr[10];
	if(number >= 0) {
 754:	99 23       	and	r25, r25
 756:	dc f1       	brlt	.+118    	; 0x7ce <LCD_WriteNumber+0x98>
 758:	00 e0       	ldi	r16, 0x00	; 0
 75a:	10 e0       	ldi	r17, 0x00	; 0
 75c:	01 c0       	rjmp	.+2      	; 0x760 <LCD_WriteNumber+0x2a>
		do{
			arr[length++] = number%10;
 75e:	89 01       	movw	r16, r18
 760:	98 01       	movw	r18, r16
 762:	2f 5f       	subi	r18, 0xFF	; 255
 764:	3f 4f       	sbci	r19, 0xFF	; 255
 766:	c7 01       	movw	r24, r14
 768:	6a e0       	ldi	r22, 0x0A	; 10
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	0e 94 56 05 	call	0xaac	; 0xaac <__divmodhi4>
 770:	f8 01       	movw	r30, r16
 772:	ee 0f       	add	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	4c 0f       	add	r20, r28
 77c:	5d 1f       	adc	r21, r29
 77e:	e4 0f       	add	r30, r20
 780:	f5 1f       	adc	r31, r21
 782:	91 83       	std	Z+1, r25	; 0x01
 784:	80 83       	st	Z, r24
			number = number/10;
 786:	e6 2e       	mov	r14, r22
 788:	f7 2e       	mov	r15, r23

		} while(number != 0);
 78a:	e1 14       	cp	r14, r1
 78c:	f1 04       	cpc	r15, r1
 78e:	39 f7       	brne	.-50     	; 0x75e <LCD_WriteNumber+0x28>
 790:	8f e1       	ldi	r24, 0x1F	; 31
 792:	9e e4       	ldi	r25, 0x4E	; 78
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	f1 f7       	brne	.-4      	; 0x794 <LCD_WriteNumber+0x5e>
 798:	00 c0       	rjmp	.+0      	; 0x79a <LCD_WriteNumber+0x64>
 79a:	00 00       	nop
		_delay_ms(5);
		
		int i = length-1;
		for(int i = length-1; i >= 0; i--){
 79c:	15 c0       	rjmp	.+42     	; 0x7c8 <LCD_WriteNumber+0x92>
			LCD_WriteChar(arr[i] + '0');
 79e:	f8 01       	movw	r30, r16
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	50 e0       	ldi	r21, 0x00	; 0
 7a8:	4c 0f       	add	r20, r28
 7aa:	5d 1f       	adc	r21, r29
 7ac:	e4 0f       	add	r30, r20
 7ae:	f5 1f       	adc	r31, r21
 7b0:	80 81       	ld	r24, Z
 7b2:	80 5d       	subi	r24, 0xD0	; 208
 7b4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteChar>
 7b8:	8f e9       	ldi	r24, 0x9F	; 159
 7ba:	9f e0       	ldi	r25, 0x0F	; 15
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <LCD_WriteNumber+0x86>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <LCD_WriteNumber+0x8c>
 7c2:	00 00       	nop

		} while(number != 0);
		_delay_ms(5);
		
		int i = length-1;
		for(int i = length-1; i >= 0; i--){
 7c4:	01 50       	subi	r16, 0x01	; 1
 7c6:	11 09       	sbc	r17, r1
 7c8:	11 23       	and	r17, r17
 7ca:	4c f7       	brge	.-46     	; 0x79e <LCD_WriteNumber+0x68>
 7cc:	42 c0       	rjmp	.+132    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			LCD_WriteChar(arr[i] + '0');
			_delay_ms(1);
		}
	}
	else if(number < 0) {
 7ce:	99 23       	and	r25, r25
 7d0:	0c f0       	brlt	.+2      	; 0x7d4 <LCD_WriteNumber+0x9e>
 7d2:	3f c0       	rjmp	.+126    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		LCD_WriteChar('-');
 7d4:	8d e2       	ldi	r24, 0x2D	; 45
 7d6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteChar>
		number = number * -1;
 7da:	88 27       	eor	r24, r24
 7dc:	99 27       	eor	r25, r25
 7de:	8e 19       	sub	r24, r14
 7e0:	9f 09       	sbc	r25, r15
		String++;
	}
};

void LCD_WriteNumber(int number) {
	int length = 0;
 7e2:	00 e0       	ldi	r16, 0x00	; 0
 7e4:	10 e0       	ldi	r17, 0x00	; 0
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <LCD_WriteNumber+0xb4>
	}
	else if(number < 0) {
		LCD_WriteChar('-');
		number = number * -1;
		do{
			arr[length++] = number%10;
 7e8:	89 01       	movw	r16, r18
 7ea:	98 01       	movw	r18, r16
 7ec:	2f 5f       	subi	r18, 0xFF	; 255
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	6a e0       	ldi	r22, 0x0A	; 10
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	0e 94 56 05 	call	0xaac	; 0xaac <__divmodhi4>
 7f8:	f8 01       	movw	r30, r16
 7fa:	ee 0f       	add	r30, r30
 7fc:	ff 1f       	adc	r31, r31
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	4c 0f       	add	r20, r28
 804:	5d 1f       	adc	r21, r29
 806:	e4 0f       	add	r30, r20
 808:	f5 1f       	adc	r31, r21
 80a:	91 83       	std	Z+1, r25	; 0x01
 80c:	80 83       	st	Z, r24
			number = number/10;
 80e:	86 2f       	mov	r24, r22
 810:	97 2f       	mov	r25, r23

		} while(number != 0);
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	49 f7       	brne	.-46     	; 0x7e8 <LCD_WriteNumber+0xb2>
 816:	8f e1       	ldi	r24, 0x1F	; 31
 818:	9e e4       	ldi	r25, 0x4E	; 78
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 820:	00 00       	nop
		_delay_ms(5);
		
		int i = length-1;
		for(int i = length-1; i >= 0; i--){
 822:	15 c0       	rjmp	.+42     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			LCD_WriteChar(arr[i] + '0');
 824:	f8 01       	movw	r30, r16
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	41 e0       	ldi	r20, 0x01	; 1
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	4c 0f       	add	r20, r28
 830:	5d 1f       	adc	r21, r29
 832:	e4 0f       	add	r30, r20
 834:	f5 1f       	adc	r31, r21
 836:	80 81       	ld	r24, Z
 838:	80 5d       	subi	r24, 0xD0	; 208
 83a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteChar>
 83e:	8f e9       	ldi	r24, 0x9F	; 159
 840:	9f e0       	ldi	r25, 0x0F	; 15
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 846:	00 c0       	rjmp	.+0      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 848:	00 00       	nop

		} while(number != 0);
		_delay_ms(5);
		
		int i = length-1;
		for(int i = length-1; i >= 0; i--){
 84a:	01 50       	subi	r16, 0x01	; 1
 84c:	11 09       	sbc	r17, r1
 84e:	11 23       	and	r17, r17
 850:	4c f7       	brge	.-46     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			LCD_WriteChar(arr[i] + '0');
			_delay_ms(1);
		}
	}
}
 852:	64 96       	adiw	r28, 0x14	; 20
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	f8 94       	cli
 858:	de bf       	out	0x3e, r29	; 62
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	cd bf       	out	0x3d, r28	; 61
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	ff 90       	pop	r15
 868:	ef 90       	pop	r14
 86a:	08 95       	ret

0000086c <LCD_Clear>:
void LCD_Clear(){
	LCD_WriteCommand(0x01);
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
 872:	08 95       	ret

00000874 <LCD_GoTo>:
}

void LCD_GoTo(u8 Row,u8 Column) {
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	00 d0       	rcall	.+0      	; 0x87a <LCD_GoTo+0x6>
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
	u8 Arr[2] = {0x80, 0xC0};
 87e:	90 e8       	ldi	r25, 0x80	; 128
 880:	99 83       	std	Y+1, r25	; 0x01
 882:	90 ec       	ldi	r25, 0xC0	; 192
 884:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCommand(Arr[Row] + Column);
 886:	e1 e0       	ldi	r30, 0x01	; 1
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	ec 0f       	add	r30, r28
 88c:	fd 1f       	adc	r31, r29
 88e:	e8 0f       	add	r30, r24
 890:	f1 1d       	adc	r31, r1
 892:	80 81       	ld	r24, Z
 894:	86 0f       	add	r24, r22
 896:	0e 94 30 03 	call	0x660	; 0x660 <LCD_WriteCommand>
}
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	08 95       	ret

000008a4 <ServoMotor_Init>:

#include "ServoMotor.h"

void ServoMotor_Init(void) {
	//Set OC1A pin as output
	SET_BIT(DDRD, PD5);
 8a4:	81 b3       	in	r24, 0x11	; 17
 8a6:	80 62       	ori	r24, 0x20	; 32
 8a8:	81 bb       	out	0x11, r24	; 17
	//Set Mode 14 (Fast PWM) Mode
	SET_BIT(TCCR1B, WGM13);
 8aa:	8e b5       	in	r24, 0x2e	; 46
 8ac:	80 61       	ori	r24, 0x10	; 16
 8ae:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, WGM12);
 8b0:	8e b5       	in	r24, 0x2e	; 46
 8b2:	88 60       	ori	r24, 0x08	; 8
 8b4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A, WGM11);
 8b6:	8f b5       	in	r24, 0x2f	; 47
 8b8:	82 60       	ori	r24, 0x02	; 2
 8ba:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A, WGM10);
 8bc:	8f b5       	in	r24, 0x2f	; 47
 8be:	8e 7f       	andi	r24, 0xFE	; 254
 8c0:	8f bd       	out	0x2f, r24	; 47
	//Choose non-inverting mode
	SET_BIT(TCCR1A, COM1A1);
 8c2:	8f b5       	in	r24, 0x2f	; 47
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A, COM1A0);
 8c8:	8f b5       	in	r24, 0x2f	; 47
 8ca:	8f 7b       	andi	r24, 0xBF	; 191
 8cc:	8f bd       	out	0x2f, r24	; 47
	//Set prescaler = 256
	SET_BIT(TCCR1B, CS12);
 8ce:	8e b5       	in	r24, 0x2e	; 46
 8d0:	84 60       	ori	r24, 0x04	; 4
 8d2:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B, CS11);
 8d4:	8e b5       	in	r24, 0x2e	; 46
 8d6:	8d 7f       	andi	r24, 0xFD	; 253
 8d8:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B, CS10);
 8da:	8e b5       	in	r24, 0x2e	; 46
 8dc:	8e 7f       	andi	r24, 0xFE	; 254
 8de:	8e bd       	out	0x2e, r24	; 46
	//Set Top Value
	ICR1 = 1250; //This would give a 50Hz frequency (20ms period)
 8e0:	82 ee       	ldi	r24, 0xE2	; 226
 8e2:	94 e0       	ldi	r25, 0x04	; 4
 8e4:	97 bd       	out	0x27, r25	; 39
 8e6:	86 bd       	out	0x26, r24	; 38
 8e8:	08 95       	ret

000008ea <ServoMotor_Rotate>:
}

void ServoMotor_Rotate(u8 angle) {
	OCR1A = ((ICR1*angle) / 100) - 1;
 8ea:	46 b5       	in	r20, 0x26	; 38
 8ec:	57 b5       	in	r21, 0x27	; 39
 8ee:	28 2f       	mov	r18, r24
 8f0:	24 9f       	mul	r18, r20
 8f2:	c0 01       	movw	r24, r0
 8f4:	25 9f       	mul	r18, r21
 8f6:	90 0d       	add	r25, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	9c 01       	movw	r18, r24
 8fc:	36 95       	lsr	r19
 8fe:	27 95       	ror	r18
 900:	36 95       	lsr	r19
 902:	27 95       	ror	r18
 904:	ab e7       	ldi	r26, 0x7B	; 123
 906:	b4 e1       	ldi	r27, 0x14	; 20
 908:	0e 94 8c 05 	call	0xb18	; 0xb18 <__umulhisi3>
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	9b bd       	out	0x2b, r25	; 43
 914:	8a bd       	out	0x2a, r24	; 42
 916:	08 95       	ret

00000918 <ServoMotor_OpenDoor>:
}

void ServoMotor_OpenDoor(void) {
	ServoMotor_Rotate(Angle_AC90); //Set Servo's starting position
 918:	8a e0       	ldi	r24, 0x0A	; 10
 91a:	0e 94 75 04 	call	0x8ea	; 0x8ea <ServoMotor_Rotate>
 91e:	2f ef       	ldi	r18, 0xFF	; 255
 920:	84 e3       	ldi	r24, 0x34	; 52
 922:	9c e0       	ldi	r25, 0x0C	; 12
 924:	21 50       	subi	r18, 0x01	; 1
 926:	80 40       	sbci	r24, 0x00	; 0
 928:	90 40       	sbci	r25, 0x00	; 0
 92a:	e1 f7       	brne	.-8      	; 0x924 <ServoMotor_OpenDoor+0xc>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <ServoMotor_OpenDoor+0x16>
 92e:	00 00       	nop
	_delay_ms(250); 
	ServoMotor_Rotate(Angle_0); //Open the door
 930:	85 e0       	ldi	r24, 0x05	; 5
 932:	0e 94 75 04 	call	0x8ea	; 0x8ea <ServoMotor_Rotate>
 936:	2f ef       	ldi	r18, 0xFF	; 255
 938:	85 ee       	ldi	r24, 0xE5	; 229
 93a:	9a ea       	ldi	r25, 0xAA	; 170
 93c:	21 50       	subi	r18, 0x01	; 1
 93e:	80 40       	sbci	r24, 0x00	; 0
 940:	90 40       	sbci	r25, 0x00	; 0
 942:	e1 f7       	brne	.-8      	; 0x93c <ServoMotor_OpenDoor+0x24>
 944:	00 c0       	rjmp	.+0      	; 0x946 <ServoMotor_OpenDoor+0x2e>
 946:	00 00       	nop
	_delay_ms(3500); //Wait for user to enter
	ServoMotor_Rotate(Angle_AC90); //Return to starting position
 948:	8a e0       	ldi	r24, 0x0A	; 10
 94a:	0e 94 75 04 	call	0x8ea	; 0x8ea <ServoMotor_Rotate>
 94e:	2f ef       	ldi	r18, 0xFF	; 255
 950:	84 e3       	ldi	r24, 0x34	; 52
 952:	9c e0       	ldi	r25, 0x0C	; 12
 954:	21 50       	subi	r18, 0x01	; 1
 956:	80 40       	sbci	r24, 0x00	; 0
 958:	90 40       	sbci	r25, 0x00	; 0
 95a:	e1 f7       	brne	.-8      	; 0x954 <ServoMotor_OpenDoor+0x3c>
 95c:	00 c0       	rjmp	.+0      	; 0x95e <ServoMotor_OpenDoor+0x46>
 95e:	00 00       	nop
 960:	08 95       	ret

00000962 <TempSensor_Init>:

#include "TempSensor.h"

void TempSensor_Init(void){
	ADC_Init();
 962:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ADC_Init>
 966:	08 95       	ret

00000968 <TempSensor_Read>:
}

u16  TempSensor_Read(void){
 968:	cf 92       	push	r12
 96a:	df 92       	push	r13
 96c:	ef 92       	push	r14
 96e:	ff 92       	push	r15
	u16 ADCValue  = ADC_Read();
 970:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <ADC_Read>
	u16 Temperature = ((u32)ADCValue * 500) / 1023;
 974:	9c 01       	movw	r18, r24
 976:	a4 ef       	ldi	r26, 0xF4	; 244
 978:	b1 e0       	ldi	r27, 0x01	; 1
 97a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__umulhisi3>
 97e:	2f ef       	ldi	r18, 0xFF	; 255
 980:	33 e0       	ldi	r19, 0x03	; 3
 982:	40 e0       	ldi	r20, 0x00	; 0
 984:	50 e0       	ldi	r21, 0x00	; 0
 986:	0e 94 6a 05 	call	0xad4	; 0xad4 <__udivmodsi4>
 98a:	69 01       	movw	r12, r18
 98c:	7a 01       	movw	r14, r20
	if(Temperature > 35){
 98e:	24 32       	cpi	r18, 0x24	; 36
 990:	31 05       	cpc	r19, r1
 992:	28 f0       	brcs	.+10     	; 0x99e <TempSensor_Read+0x36>
		DCMotor_Start();
 994:	0e 94 b8 02 	call	0x570	; 0x570 <DCMotor_Start>
		Buzzer_Beep();
 998:	0e 94 2c 02 	call	0x458	; 0x458 <Buzzer_Beep>
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <TempSensor_Read+0x3a>
	}
	else {
		DCMotor_Stop();
 99e:	0e 94 bc 02 	call	0x578	; 0x578 <DCMotor_Stop>
	}
	return Temperature;
}
 9a2:	c6 01       	movw	r24, r12
 9a4:	ff 90       	pop	r15
 9a6:	ef 90       	pop	r14
 9a8:	df 90       	pop	r13
 9aa:	cf 90       	pop	r12
 9ac:	08 95       	ret

000009ae <ADC_Init>:
	CLEAR_BIT(ADMUX,7);
	#elif VREF   ==   _2V56
	SET_BIT(ADMUX,6);
	SET_BIT(ADMUX,7);
	#endif
	CLEAR_BIT(ADMUX,5);     // Select right adjust
 9ae:	87 b1       	in	r24, 0x07	; 7
 9b0:	8f 7d       	andi	r24, 0xDF	; 223
 9b2:	87 b9       	out	0x07, r24	; 7
	
	//Select channel -> ADC1
	CLEAR_BIT(ADMUX,4);
 9b4:	87 b1       	in	r24, 0x07	; 7
 9b6:	8f 7e       	andi	r24, 0xEF	; 239
 9b8:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,3);
 9ba:	87 b1       	in	r24, 0x07	; 7
 9bc:	87 7f       	andi	r24, 0xF7	; 247
 9be:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,2);
 9c0:	87 b1       	in	r24, 0x07	; 7
 9c2:	8b 7f       	andi	r24, 0xFB	; 251
 9c4:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,1);
 9c6:	87 b1       	in	r24, 0x07	; 7
 9c8:	8d 7f       	andi	r24, 0xFD	; 253
 9ca:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX,0);
 9cc:	87 b1       	in	r24, 0x07	; 7
 9ce:	81 60       	ori	r24, 0x01	; 1
 9d0:	87 b9       	out	0x07, r24	; 7
	//Select 128 as devision factor -> ADC circuit -> 125 Khz
	SET_BIT(ADCSRA,0);
 9d2:	86 b1       	in	r24, 0x06	; 6
 9d4:	81 60       	ori	r24, 0x01	; 1
 9d6:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
 9d8:	86 b1       	in	r24, 0x06	; 6
 9da:	82 60       	ori	r24, 0x02	; 2
 9dc:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
 9de:	86 b1       	in	r24, 0x06	; 6
 9e0:	84 60       	ori	r24, 0x04	; 4
 9e2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,5);   //Enable auto trigger
 9e4:	86 b1       	in	r24, 0x06	; 6
 9e6:	80 62       	ori	r24, 0x20	; 32
 9e8:	86 b9       	out	0x06, r24	; 6
	
	SET_BIT(ADCSRA,7);   //Enable ADC circuit
 9ea:	86 b1       	in	r24, 0x06	; 6
 9ec:	80 68       	ori	r24, 0x80	; 128
 9ee:	86 b9       	out	0x06, r24	; 6
 9f0:	08 95       	ret

000009f2 <ADC_Read>:
}

u16  ADC_Read(void)
{
	SET_BIT(ADCSRA,6);   // to start conversion
 9f2:	86 b1       	in	r24, 0x06	; 6
 9f4:	80 64       	ori	r24, 0x40	; 64
 9f6:	86 b9       	out	0x06, r24	; 6
	while ((READ_BIT(ADCSRA,4)) == 0);
 9f8:	34 9b       	sbis	0x06, 4	; 6
 9fa:	fe cf       	rjmp	.-4      	; 0x9f8 <ADC_Read+0x6>
	return ADC_VALUE;
 9fc:	84 b1       	in	r24, 0x04	; 4
 9fe:	95 b1       	in	r25, 0x05	; 5
}
 a00:	08 95       	ret

00000a02 <__vector_16>:


ISR(ADC_vect)
{
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	8f 93       	push	r24
 a0e:	9f 93       	push	r25
	x = ADC_VALUE;
 a10:	84 b1       	in	r24, 0x04	; 4
 a12:	95 b1       	in	r25, 0x05	; 5
 a14:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <__data_end+0x1>
 a18:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__data_end>
}
 a1c:	9f 91       	pop	r25
 a1e:	8f 91       	pop	r24
 a20:	0f 90       	pop	r0
 a22:	0f be       	out	0x3f, r0	; 63
 a24:	0f 90       	pop	r0
 a26:	1f 90       	pop	r1
 a28:	18 95       	reti

00000a2a <TWI_Init>:
u8 TWI_Read_Ack(u8 *rxData){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Clear the interrupt flag, set enable, and send Ack Bit
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT to set
	*rxData = TWDR;
	return TWI_Status();
}
 a2a:	8c e0       	ldi	r24, 0x0C	; 12
 a2c:	80 b9       	out	0x00, r24	; 0
 a2e:	08 95       	ret

00000a30 <TWI_Send_StopBit>:
 a30:	84 e9       	ldi	r24, 0x94	; 148
 a32:	86 bf       	out	0x36, r24	; 54
 a34:	08 95       	ret

00000a36 <TWI_Status>:
 a36:	81 b1       	in	r24, 0x01	; 1
 a38:	88 7f       	andi	r24, 0xF8	; 248
 a3a:	08 95       	ret

00000a3c <TWI_Send_StartBit>:
 a3c:	84 ea       	ldi	r24, 0xA4	; 164
 a3e:	86 bf       	out	0x36, r24	; 54
 a40:	06 b6       	in	r0, 0x36	; 54
 a42:	07 fe       	sbrs	r0, 7
 a44:	fd cf       	rjmp	.-6      	; 0xa40 <TWI_Send_StartBit+0x4>
 a46:	0e 94 1b 05 	call	0xa36	; 0xa36 <TWI_Status>
 a4a:	08 95       	ret

00000a4c <TWI_Send_Byte>:
 a4c:	83 b9       	out	0x03, r24	; 3
 a4e:	84 e8       	ldi	r24, 0x84	; 132
 a50:	86 bf       	out	0x36, r24	; 54
 a52:	06 b6       	in	r0, 0x36	; 54
 a54:	07 fe       	sbrs	r0, 7
 a56:	fd cf       	rjmp	.-6      	; 0xa52 <TWI_Send_Byte+0x6>
 a58:	0e 94 1b 05 	call	0xa36	; 0xa36 <TWI_Status>
 a5c:	08 95       	ret

00000a5e <TWI_Read_NAck>:
u8 TWI_Read_NAck(u8 *rxData){
	TWCR = (1<<TWINT)|(1<<TWEN); //Clear the interrupt flag, set enable, and ignore Ack Bit
 a5e:	24 e8       	ldi	r18, 0x84	; 132
 a60:	26 bf       	out	0x36, r18	; 54
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT to set
 a62:	06 b6       	in	r0, 0x36	; 54
 a64:	07 fe       	sbrs	r0, 7
 a66:	fd cf       	rjmp	.-6      	; 0xa62 <TWI_Read_NAck+0x4>
	*rxData = TWDR;
 a68:	23 b1       	in	r18, 0x03	; 3
 a6a:	fc 01       	movw	r30, r24
 a6c:	20 83       	st	Z, r18
	return TWI_Status();
 a6e:	0e 94 1b 05 	call	0xa36	; 0xa36 <TWI_Status>
}
 a72:	08 95       	ret

00000a74 <UART_Init>:
#include "UART.h"

void UART_Init(void) {
	u16 UBRR;
	UBRR  = (F_CPU/(16*BAUD_RATE)) - 1; //Set Baudrate 
	UBRRH = (u16)(UBRR>>8);
 a74:	82 e0       	ldi	r24, 0x02	; 2
 a76:	80 bd       	out	0x20, r24	; 32
	UBRRL = (u16)(UBRR);
 a78:	85 ec       	ldi	r24, 0xC5	; 197
 a7a:	89 b9       	out	0x09, r24	; 9
	//Enable Receive and Transmit interrupts
	SET_BIT(UCSRB,RXCIE);
 a7c:	8a b1       	in	r24, 0x0a	; 10
 a7e:	80 68       	ori	r24, 0x80	; 128
 a80:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,RXEN);
 a82:	8a b1       	in	r24, 0x0a	; 10
 a84:	80 61       	ori	r24, 0x10	; 16
 a86:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,TXEN);
 a88:	8a b1       	in	r24, 0x0a	; 10
 a8a:	88 60       	ori	r24, 0x08	; 8
 a8c:	8a b9       	out	0x0a, r24	; 10
	//Choose Asynchronous Mode, 8 Bit data, and 1 Stop bit
	SET_BIT(UCSRC,URSEL);
 a8e:	80 b5       	in	r24, 0x20	; 32
 a90:	80 68       	ori	r24, 0x80	; 128
 a92:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ1);
 a94:	80 b5       	in	r24, 0x20	; 32
 a96:	84 60       	ori	r24, 0x04	; 4
 a98:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ0);
 a9a:	80 b5       	in	r24, 0x20	; 32
 a9c:	82 60       	ori	r24, 0x02	; 2
 a9e:	80 bd       	out	0x20, r24	; 32
	sei(); //Enable global interrupts
 aa0:	78 94       	sei
 aa2:	08 95       	ret

00000aa4 <UART_Transmit>:
}

void UART_Transmit(u8 Data) {
	while(!(UCSRA&(1<<UDRE))); //Wait until buffer is empty
 aa4:	5d 9b       	sbis	0x0b, 5	; 11
 aa6:	fe cf       	rjmp	.-4      	; 0xaa4 <UART_Transmit>
	UDR = Data; //Send data
 aa8:	8c b9       	out	0x0c, r24	; 12
 aaa:	08 95       	ret

00000aac <__divmodhi4>:
 aac:	97 fb       	bst	r25, 7
 aae:	07 2e       	mov	r0, r23
 ab0:	16 f4       	brtc	.+4      	; 0xab6 <__divmodhi4+0xa>
 ab2:	00 94       	com	r0
 ab4:	07 d0       	rcall	.+14     	; 0xac4 <__divmodhi4_neg1>
 ab6:	77 fd       	sbrc	r23, 7
 ab8:	09 d0       	rcall	.+18     	; 0xacc <__divmodhi4_neg2>
 aba:	0e 94 9b 05 	call	0xb36	; 0xb36 <__udivmodhi4>
 abe:	07 fc       	sbrc	r0, 7
 ac0:	05 d0       	rcall	.+10     	; 0xacc <__divmodhi4_neg2>
 ac2:	3e f4       	brtc	.+14     	; 0xad2 <__divmodhi4_exit>

00000ac4 <__divmodhi4_neg1>:
 ac4:	90 95       	com	r25
 ac6:	81 95       	neg	r24
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	08 95       	ret

00000acc <__divmodhi4_neg2>:
 acc:	70 95       	com	r23
 ace:	61 95       	neg	r22
 ad0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ad2 <__divmodhi4_exit>:
 ad2:	08 95       	ret

00000ad4 <__udivmodsi4>:
 ad4:	a1 e2       	ldi	r26, 0x21	; 33
 ad6:	1a 2e       	mov	r1, r26
 ad8:	aa 1b       	sub	r26, r26
 ada:	bb 1b       	sub	r27, r27
 adc:	fd 01       	movw	r30, r26
 ade:	0d c0       	rjmp	.+26     	; 0xafa <__udivmodsi4_ep>

00000ae0 <__udivmodsi4_loop>:
 ae0:	aa 1f       	adc	r26, r26
 ae2:	bb 1f       	adc	r27, r27
 ae4:	ee 1f       	adc	r30, r30
 ae6:	ff 1f       	adc	r31, r31
 ae8:	a2 17       	cp	r26, r18
 aea:	b3 07       	cpc	r27, r19
 aec:	e4 07       	cpc	r30, r20
 aee:	f5 07       	cpc	r31, r21
 af0:	20 f0       	brcs	.+8      	; 0xafa <__udivmodsi4_ep>
 af2:	a2 1b       	sub	r26, r18
 af4:	b3 0b       	sbc	r27, r19
 af6:	e4 0b       	sbc	r30, r20
 af8:	f5 0b       	sbc	r31, r21

00000afa <__udivmodsi4_ep>:
 afa:	66 1f       	adc	r22, r22
 afc:	77 1f       	adc	r23, r23
 afe:	88 1f       	adc	r24, r24
 b00:	99 1f       	adc	r25, r25
 b02:	1a 94       	dec	r1
 b04:	69 f7       	brne	.-38     	; 0xae0 <__udivmodsi4_loop>
 b06:	60 95       	com	r22
 b08:	70 95       	com	r23
 b0a:	80 95       	com	r24
 b0c:	90 95       	com	r25
 b0e:	9b 01       	movw	r18, r22
 b10:	ac 01       	movw	r20, r24
 b12:	bd 01       	movw	r22, r26
 b14:	cf 01       	movw	r24, r30
 b16:	08 95       	ret

00000b18 <__umulhisi3>:
 b18:	a2 9f       	mul	r26, r18
 b1a:	b0 01       	movw	r22, r0
 b1c:	b3 9f       	mul	r27, r19
 b1e:	c0 01       	movw	r24, r0
 b20:	a3 9f       	mul	r26, r19
 b22:	70 0d       	add	r23, r0
 b24:	81 1d       	adc	r24, r1
 b26:	11 24       	eor	r1, r1
 b28:	91 1d       	adc	r25, r1
 b2a:	b2 9f       	mul	r27, r18
 b2c:	70 0d       	add	r23, r0
 b2e:	81 1d       	adc	r24, r1
 b30:	11 24       	eor	r1, r1
 b32:	91 1d       	adc	r25, r1
 b34:	08 95       	ret

00000b36 <__udivmodhi4>:
 b36:	aa 1b       	sub	r26, r26
 b38:	bb 1b       	sub	r27, r27
 b3a:	51 e1       	ldi	r21, 0x11	; 17
 b3c:	07 c0       	rjmp	.+14     	; 0xb4c <__udivmodhi4_ep>

00000b3e <__udivmodhi4_loop>:
 b3e:	aa 1f       	adc	r26, r26
 b40:	bb 1f       	adc	r27, r27
 b42:	a6 17       	cp	r26, r22
 b44:	b7 07       	cpc	r27, r23
 b46:	10 f0       	brcs	.+4      	; 0xb4c <__udivmodhi4_ep>
 b48:	a6 1b       	sub	r26, r22
 b4a:	b7 0b       	sbc	r27, r23

00000b4c <__udivmodhi4_ep>:
 b4c:	88 1f       	adc	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	5a 95       	dec	r21
 b52:	a9 f7       	brne	.-22     	; 0xb3e <__udivmodhi4_loop>
 b54:	80 95       	com	r24
 b56:	90 95       	com	r25
 b58:	bc 01       	movw	r22, r24
 b5a:	cd 01       	movw	r24, r26
 b5c:	08 95       	ret

00000b5e <malloc>:
 b5e:	0f 93       	push	r16
 b60:	1f 93       	push	r17
 b62:	cf 93       	push	r28
 b64:	df 93       	push	r29
 b66:	82 30       	cpi	r24, 0x02	; 2
 b68:	91 05       	cpc	r25, r1
 b6a:	10 f4       	brcc	.+4      	; 0xb70 <malloc+0x12>
 b6c:	82 e0       	ldi	r24, 0x02	; 2
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__flp>
 b74:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__flp+0x1>
 b78:	20 e0       	ldi	r18, 0x00	; 0
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	a0 e0       	ldi	r26, 0x00	; 0
 b7e:	b0 e0       	ldi	r27, 0x00	; 0
 b80:	30 97       	sbiw	r30, 0x00	; 0
 b82:	19 f1       	breq	.+70     	; 0xbca <malloc+0x6c>
 b84:	40 81       	ld	r20, Z
 b86:	51 81       	ldd	r21, Z+1	; 0x01
 b88:	02 81       	ldd	r16, Z+2	; 0x02
 b8a:	13 81       	ldd	r17, Z+3	; 0x03
 b8c:	48 17       	cp	r20, r24
 b8e:	59 07       	cpc	r21, r25
 b90:	c8 f0       	brcs	.+50     	; 0xbc4 <malloc+0x66>
 b92:	84 17       	cp	r24, r20
 b94:	95 07       	cpc	r25, r21
 b96:	69 f4       	brne	.+26     	; 0xbb2 <malloc+0x54>
 b98:	10 97       	sbiw	r26, 0x00	; 0
 b9a:	31 f0       	breq	.+12     	; 0xba8 <malloc+0x4a>
 b9c:	12 96       	adiw	r26, 0x02	; 2
 b9e:	0c 93       	st	X, r16
 ba0:	12 97       	sbiw	r26, 0x02	; 2
 ba2:	13 96       	adiw	r26, 0x03	; 3
 ba4:	1c 93       	st	X, r17
 ba6:	27 c0       	rjmp	.+78     	; 0xbf6 <malloc+0x98>
 ba8:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <__flp>
 bac:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <__flp+0x1>
 bb0:	22 c0       	rjmp	.+68     	; 0xbf6 <malloc+0x98>
 bb2:	21 15       	cp	r18, r1
 bb4:	31 05       	cpc	r19, r1
 bb6:	19 f0       	breq	.+6      	; 0xbbe <malloc+0x60>
 bb8:	42 17       	cp	r20, r18
 bba:	53 07       	cpc	r21, r19
 bbc:	18 f4       	brcc	.+6      	; 0xbc4 <malloc+0x66>
 bbe:	9a 01       	movw	r18, r20
 bc0:	bd 01       	movw	r22, r26
 bc2:	ef 01       	movw	r28, r30
 bc4:	df 01       	movw	r26, r30
 bc6:	f8 01       	movw	r30, r16
 bc8:	db cf       	rjmp	.-74     	; 0xb80 <malloc+0x22>
 bca:	21 15       	cp	r18, r1
 bcc:	31 05       	cpc	r19, r1
 bce:	f9 f0       	breq	.+62     	; 0xc0e <malloc+0xb0>
 bd0:	28 1b       	sub	r18, r24
 bd2:	39 0b       	sbc	r19, r25
 bd4:	24 30       	cpi	r18, 0x04	; 4
 bd6:	31 05       	cpc	r19, r1
 bd8:	80 f4       	brcc	.+32     	; 0xbfa <malloc+0x9c>
 bda:	8a 81       	ldd	r24, Y+2	; 0x02
 bdc:	9b 81       	ldd	r25, Y+3	; 0x03
 bde:	61 15       	cp	r22, r1
 be0:	71 05       	cpc	r23, r1
 be2:	21 f0       	breq	.+8      	; 0xbec <malloc+0x8e>
 be4:	fb 01       	movw	r30, r22
 be6:	93 83       	std	Z+3, r25	; 0x03
 be8:	82 83       	std	Z+2, r24	; 0x02
 bea:	04 c0       	rjmp	.+8      	; 0xbf4 <malloc+0x96>
 bec:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__flp+0x1>
 bf0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__flp>
 bf4:	fe 01       	movw	r30, r28
 bf6:	32 96       	adiw	r30, 0x02	; 2
 bf8:	44 c0       	rjmp	.+136    	; 0xc82 <malloc+0x124>
 bfa:	fe 01       	movw	r30, r28
 bfc:	e2 0f       	add	r30, r18
 bfe:	f3 1f       	adc	r31, r19
 c00:	81 93       	st	Z+, r24
 c02:	91 93       	st	Z+, r25
 c04:	22 50       	subi	r18, 0x02	; 2
 c06:	31 09       	sbc	r19, r1
 c08:	39 83       	std	Y+1, r19	; 0x01
 c0a:	28 83       	st	Y, r18
 c0c:	3a c0       	rjmp	.+116    	; 0xc82 <malloc+0x124>
 c0e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__brkval>
 c12:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__brkval+0x1>
 c16:	23 2b       	or	r18, r19
 c18:	41 f4       	brne	.+16     	; 0xc2a <malloc+0xcc>
 c1a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 c1e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 c22:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__brkval+0x1>
 c26:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__brkval>
 c2a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 c2e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 c32:	21 15       	cp	r18, r1
 c34:	31 05       	cpc	r19, r1
 c36:	41 f4       	brne	.+16     	; 0xc48 <malloc+0xea>
 c38:	2d b7       	in	r18, 0x3d	; 61
 c3a:	3e b7       	in	r19, 0x3e	; 62
 c3c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 c40:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 c44:	24 1b       	sub	r18, r20
 c46:	35 0b       	sbc	r19, r21
 c48:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__brkval>
 c4c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__brkval+0x1>
 c50:	e2 17       	cp	r30, r18
 c52:	f3 07       	cpc	r31, r19
 c54:	a0 f4       	brcc	.+40     	; 0xc7e <malloc+0x120>
 c56:	2e 1b       	sub	r18, r30
 c58:	3f 0b       	sbc	r19, r31
 c5a:	28 17       	cp	r18, r24
 c5c:	39 07       	cpc	r19, r25
 c5e:	78 f0       	brcs	.+30     	; 0xc7e <malloc+0x120>
 c60:	ac 01       	movw	r20, r24
 c62:	4e 5f       	subi	r20, 0xFE	; 254
 c64:	5f 4f       	sbci	r21, 0xFF	; 255
 c66:	24 17       	cp	r18, r20
 c68:	35 07       	cpc	r19, r21
 c6a:	48 f0       	brcs	.+18     	; 0xc7e <malloc+0x120>
 c6c:	4e 0f       	add	r20, r30
 c6e:	5f 1f       	adc	r21, r31
 c70:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__brkval+0x1>
 c74:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__brkval>
 c78:	81 93       	st	Z+, r24
 c7a:	91 93       	st	Z+, r25
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <malloc+0x124>
 c7e:	e0 e0       	ldi	r30, 0x00	; 0
 c80:	f0 e0       	ldi	r31, 0x00	; 0
 c82:	cf 01       	movw	r24, r30
 c84:	df 91       	pop	r29
 c86:	cf 91       	pop	r28
 c88:	1f 91       	pop	r17
 c8a:	0f 91       	pop	r16
 c8c:	08 95       	ret

00000c8e <free>:
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	00 97       	sbiw	r24, 0x00	; 0
 c94:	09 f4       	brne	.+2      	; 0xc98 <free+0xa>
 c96:	81 c0       	rjmp	.+258    	; 0xd9a <free+0x10c>
 c98:	fc 01       	movw	r30, r24
 c9a:	32 97       	sbiw	r30, 0x02	; 2
 c9c:	13 82       	std	Z+3, r1	; 0x03
 c9e:	12 82       	std	Z+2, r1	; 0x02
 ca0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__flp>
 ca4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__flp+0x1>
 ca8:	10 97       	sbiw	r26, 0x00	; 0
 caa:	81 f4       	brne	.+32     	; 0xccc <free+0x3e>
 cac:	20 81       	ld	r18, Z
 cae:	31 81       	ldd	r19, Z+1	; 0x01
 cb0:	82 0f       	add	r24, r18
 cb2:	93 1f       	adc	r25, r19
 cb4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__brkval>
 cb8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__brkval+0x1>
 cbc:	28 17       	cp	r18, r24
 cbe:	39 07       	cpc	r19, r25
 cc0:	51 f5       	brne	.+84     	; 0xd16 <free+0x88>
 cc2:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <__brkval+0x1>
 cc6:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <__brkval>
 cca:	67 c0       	rjmp	.+206    	; 0xd9a <free+0x10c>
 ccc:	ed 01       	movw	r28, r26
 cce:	20 e0       	ldi	r18, 0x00	; 0
 cd0:	30 e0       	ldi	r19, 0x00	; 0
 cd2:	ce 17       	cp	r28, r30
 cd4:	df 07       	cpc	r29, r31
 cd6:	40 f4       	brcc	.+16     	; 0xce8 <free+0x5a>
 cd8:	4a 81       	ldd	r20, Y+2	; 0x02
 cda:	5b 81       	ldd	r21, Y+3	; 0x03
 cdc:	9e 01       	movw	r18, r28
 cde:	41 15       	cp	r20, r1
 ce0:	51 05       	cpc	r21, r1
 ce2:	f1 f0       	breq	.+60     	; 0xd20 <free+0x92>
 ce4:	ea 01       	movw	r28, r20
 ce6:	f5 cf       	rjmp	.-22     	; 0xcd2 <free+0x44>
 ce8:	d3 83       	std	Z+3, r29	; 0x03
 cea:	c2 83       	std	Z+2, r28	; 0x02
 cec:	40 81       	ld	r20, Z
 cee:	51 81       	ldd	r21, Z+1	; 0x01
 cf0:	84 0f       	add	r24, r20
 cf2:	95 1f       	adc	r25, r21
 cf4:	c8 17       	cp	r28, r24
 cf6:	d9 07       	cpc	r29, r25
 cf8:	59 f4       	brne	.+22     	; 0xd10 <free+0x82>
 cfa:	88 81       	ld	r24, Y
 cfc:	99 81       	ldd	r25, Y+1	; 0x01
 cfe:	84 0f       	add	r24, r20
 d00:	95 1f       	adc	r25, r21
 d02:	02 96       	adiw	r24, 0x02	; 2
 d04:	91 83       	std	Z+1, r25	; 0x01
 d06:	80 83       	st	Z, r24
 d08:	8a 81       	ldd	r24, Y+2	; 0x02
 d0a:	9b 81       	ldd	r25, Y+3	; 0x03
 d0c:	93 83       	std	Z+3, r25	; 0x03
 d0e:	82 83       	std	Z+2, r24	; 0x02
 d10:	21 15       	cp	r18, r1
 d12:	31 05       	cpc	r19, r1
 d14:	29 f4       	brne	.+10     	; 0xd20 <free+0x92>
 d16:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <__flp+0x1>
 d1a:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <__flp>
 d1e:	3d c0       	rjmp	.+122    	; 0xd9a <free+0x10c>
 d20:	e9 01       	movw	r28, r18
 d22:	fb 83       	std	Y+3, r31	; 0x03
 d24:	ea 83       	std	Y+2, r30	; 0x02
 d26:	49 91       	ld	r20, Y+
 d28:	59 91       	ld	r21, Y+
 d2a:	c4 0f       	add	r28, r20
 d2c:	d5 1f       	adc	r29, r21
 d2e:	ec 17       	cp	r30, r28
 d30:	fd 07       	cpc	r31, r29
 d32:	61 f4       	brne	.+24     	; 0xd4c <free+0xbe>
 d34:	80 81       	ld	r24, Z
 d36:	91 81       	ldd	r25, Z+1	; 0x01
 d38:	84 0f       	add	r24, r20
 d3a:	95 1f       	adc	r25, r21
 d3c:	02 96       	adiw	r24, 0x02	; 2
 d3e:	e9 01       	movw	r28, r18
 d40:	99 83       	std	Y+1, r25	; 0x01
 d42:	88 83       	st	Y, r24
 d44:	82 81       	ldd	r24, Z+2	; 0x02
 d46:	93 81       	ldd	r25, Z+3	; 0x03
 d48:	9b 83       	std	Y+3, r25	; 0x03
 d4a:	8a 83       	std	Y+2, r24	; 0x02
 d4c:	e0 e0       	ldi	r30, 0x00	; 0
 d4e:	f0 e0       	ldi	r31, 0x00	; 0
 d50:	12 96       	adiw	r26, 0x02	; 2
 d52:	8d 91       	ld	r24, X+
 d54:	9c 91       	ld	r25, X
 d56:	13 97       	sbiw	r26, 0x03	; 3
 d58:	00 97       	sbiw	r24, 0x00	; 0
 d5a:	19 f0       	breq	.+6      	; 0xd62 <free+0xd4>
 d5c:	fd 01       	movw	r30, r26
 d5e:	dc 01       	movw	r26, r24
 d60:	f7 cf       	rjmp	.-18     	; 0xd50 <free+0xc2>
 d62:	8d 91       	ld	r24, X+
 d64:	9c 91       	ld	r25, X
 d66:	11 97       	sbiw	r26, 0x01	; 1
 d68:	9d 01       	movw	r18, r26
 d6a:	2e 5f       	subi	r18, 0xFE	; 254
 d6c:	3f 4f       	sbci	r19, 0xFF	; 255
 d6e:	82 0f       	add	r24, r18
 d70:	93 1f       	adc	r25, r19
 d72:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__brkval>
 d76:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__brkval+0x1>
 d7a:	28 17       	cp	r18, r24
 d7c:	39 07       	cpc	r19, r25
 d7e:	69 f4       	brne	.+26     	; 0xd9a <free+0x10c>
 d80:	30 97       	sbiw	r30, 0x00	; 0
 d82:	29 f4       	brne	.+10     	; 0xd8e <free+0x100>
 d84:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__flp+0x1>
 d88:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__flp>
 d8c:	02 c0       	rjmp	.+4      	; 0xd92 <free+0x104>
 d8e:	13 82       	std	Z+3, r1	; 0x03
 d90:	12 82       	std	Z+2, r1	; 0x02
 d92:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__brkval+0x1>
 d96:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__brkval>
 d9a:	df 91       	pop	r29
 d9c:	cf 91       	pop	r28
 d9e:	08 95       	ret

00000da0 <strcmp>:
 da0:	fb 01       	movw	r30, r22
 da2:	dc 01       	movw	r26, r24
 da4:	8d 91       	ld	r24, X+
 da6:	01 90       	ld	r0, Z+
 da8:	80 19       	sub	r24, r0
 daa:	01 10       	cpse	r0, r1
 dac:	d9 f3       	breq	.-10     	; 0xda4 <strcmp+0x4>
 dae:	99 0b       	sbc	r25, r25
 db0:	08 95       	ret

00000db2 <_exit>:
 db2:	f8 94       	cli

00000db4 <__stop_program>:
 db4:	ff cf       	rjmp	.-2      	; 0xdb4 <__stop_program>
