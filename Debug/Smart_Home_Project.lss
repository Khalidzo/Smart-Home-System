
Smart_Home_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000027a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f25  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ff  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083e  00000000  00000000  00002a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
************************************************************************/

int main(void)
{
	//Buzzer_Init();
	LCD_Init();
  92:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Init>
	TWI_Init();
  96:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Init>
	
	DDRB  &= ~(1<<0);
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	87 bb       	out	0x17, r24	; 23
	DDRC  |= (1<<2);
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	84 bb       	out	0x14, r24	; 20
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x14>

000000a8 <__vector_13>:
	}
}


//UART ISR
ISR(USART_RXC_vect){
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	/*Read the data from buffer*/
	UART_RX_VALUE = UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
  d2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
	if(UART_RX_VALUE == 'A') {
  d6:	81 34       	cpi	r24, 0x41	; 65
  d8:	91 05       	cpc	r25, r1
  da:	89 f4       	brne	.+34     	; 0xfe <__vector_13+0x56>
		LCD_Clear();
  dc:	0e 94 34 01 	call	0x268	; 0x268 <LCD_Clear>
		LCD_WriteString("HELLO!");
  e0:	80 e6       	ldi	r24, 0x60	; 96
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	83 ed       	ldi	r24, 0xD3	; 211
  ec:	90 e3       	ldi	r25, 0x30	; 48
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <__vector_13+0x46>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__vector_13+0x50>
  f8:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
  fa:	0e 94 34 01 	call	0x268	; 0x268 <LCD_Clear>
	}
	/*Clear the interrupt flag*/
	UCSRA|=(1<<RXC);
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	80 68       	ori	r24, 0x80	; 128
 102:	8b b9       	out	0x0b, r24	; 11
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	7f 91       	pop	r23
 112:	6f 91       	pop	r22
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <LCD_WriteChar>:
		for(int i = length-1; i >= 0; i--){
			LCD_WriteChar(arr[i] + '0');
			_delay_ms(1);
		}
	}
}
 126:	98 b3       	in	r25, 0x18	; 24
 128:	92 60       	ori	r25, 0x02	; 2
 12a:	98 bb       	out	0x18, r25	; 24
 12c:	9b b3       	in	r25, 0x1b	; 27
 12e:	28 2f       	mov	r18, r24
 130:	20 7f       	andi	r18, 0xF0	; 240
 132:	9f 70       	andi	r25, 0x0F	; 15
 134:	92 2b       	or	r25, r18
 136:	9b bb       	out	0x1b, r25	; 27
 138:	98 b3       	in	r25, 0x18	; 24
 13a:	98 60       	ori	r25, 0x08	; 8
 13c:	98 bb       	out	0x18, r25	; 24
 13e:	ef e3       	ldi	r30, 0x3F	; 63
 140:	ff e1       	ldi	r31, 0x1F	; 31
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_WriteChar+0x1c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_WriteChar+0x22>
 148:	00 00       	nop
 14a:	98 b3       	in	r25, 0x18	; 24
 14c:	97 7f       	andi	r25, 0xF7	; 247
 14e:	98 bb       	out	0x18, r25	; 24
 150:	ef e1       	ldi	r30, 0x1F	; 31
 152:	fe e4       	ldi	r31, 0x4E	; 78
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_WriteChar+0x2e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_WriteChar+0x34>
 15a:	00 00       	nop
 15c:	f0 e1       	ldi	r31, 0x10	; 16
 15e:	8f 9f       	mul	r24, r31
 160:	c0 01       	movw	r24, r0
 162:	11 24       	eor	r1, r1
 164:	9b b3       	in	r25, 0x1b	; 27
 166:	9f 70       	andi	r25, 0x0F	; 15
 168:	89 2b       	or	r24, r25
 16a:	8b bb       	out	0x1b, r24	; 27
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	88 bb       	out	0x18, r24	; 24
 172:	8f e3       	ldi	r24, 0x3F	; 63
 174:	9f e1       	ldi	r25, 0x1F	; 31
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_WriteChar+0x50>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_WriteChar+0x56>
 17c:	00 00       	nop
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	88 bb       	out	0x18, r24	; 24
 184:	ef e1       	ldi	r30, 0x1F	; 31
 186:	fe e4       	ldi	r31, 0x4E	; 78
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_WriteChar+0x62>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_WriteChar+0x68>
 18e:	00 00       	nop
 190:	08 95       	ret

00000192 <LCD_WriteCommand>:
 192:	98 b3       	in	r25, 0x18	; 24
 194:	9d 7f       	andi	r25, 0xFD	; 253
 196:	98 bb       	out	0x18, r25	; 24
 198:	9b b3       	in	r25, 0x1b	; 27
 19a:	28 2f       	mov	r18, r24
 19c:	20 7f       	andi	r18, 0xF0	; 240
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	92 2b       	or	r25, r18
 1a2:	9b bb       	out	0x1b, r25	; 27
 1a4:	98 b3       	in	r25, 0x18	; 24
 1a6:	98 60       	ori	r25, 0x08	; 8
 1a8:	98 bb       	out	0x18, r25	; 24
 1aa:	ef e3       	ldi	r30, 0x3F	; 63
 1ac:	ff e1       	ldi	r31, 0x1F	; 31
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_WriteCommand+0x1c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCD_WriteCommand+0x22>
 1b4:	00 00       	nop
 1b6:	98 b3       	in	r25, 0x18	; 24
 1b8:	97 7f       	andi	r25, 0xF7	; 247
 1ba:	98 bb       	out	0x18, r25	; 24
 1bc:	ef e1       	ldi	r30, 0x1F	; 31
 1be:	fe e4       	ldi	r31, 0x4E	; 78
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_WriteCommand+0x2e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_WriteCommand+0x34>
 1c6:	00 00       	nop
 1c8:	f0 e1       	ldi	r31, 0x10	; 16
 1ca:	8f 9f       	mul	r24, r31
 1cc:	c0 01       	movw	r24, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	9b b3       	in	r25, 0x1b	; 27
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	89 2b       	or	r24, r25
 1d6:	8b bb       	out	0x1b, r24	; 27
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9f e1       	ldi	r25, 0x1F	; 31
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_WriteCommand+0x50>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_WriteCommand+0x56>
 1e8:	00 00       	nop
 1ea:	88 b3       	in	r24, 0x18	; 24
 1ec:	87 7f       	andi	r24, 0xF7	; 247
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	ef e1       	ldi	r30, 0x1F	; 31
 1f2:	fe e4       	ldi	r31, 0x4E	; 78
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_WriteCommand+0x62>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_WriteCommand+0x68>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <LCD_Init>:
 1fe:	8a b3       	in	r24, 0x1a	; 26
 200:	80 6f       	ori	r24, 0xF0	; 240
 202:	8a bb       	out	0x1a, r24	; 26
 204:	87 b3       	in	r24, 0x17	; 23
 206:	8e 60       	ori	r24, 0x0E	; 14
 208:	87 bb       	out	0x17, r24	; 23
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	8b 7f       	andi	r24, 0xFB	; 251
 20e:	88 bb       	out	0x18, r24	; 24
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	84 e3       	ldi	r24, 0x34	; 52
 214:	9c e0       	ldi	r25, 0x0C	; 12
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <LCD_Init+0x18>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_Init+0x22>
 220:	00 00       	nop
 222:	83 e3       	ldi	r24, 0x33	; 51
 224:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 228:	82 e3       	ldi	r24, 0x32	; 50
 22a:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 234:	88 e2       	ldi	r24, 0x28	; 40
 236:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 23a:	8c e0       	ldi	r24, 0x0C	; 12
 23c:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 24c:	08 95       	ret

0000024e <LCD_WriteString>:
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
 254:	03 c0       	rjmp	.+6      	; 0x25c <LCD_WriteString+0xe>
 256:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WriteChar>
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	88 81       	ld	r24, Y
 25e:	81 11       	cpse	r24, r1
 260:	fa cf       	rjmp	.-12     	; 0x256 <LCD_WriteString+0x8>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <LCD_Clear>:
void LCD_Clear(){
	LCD_WriteCommand(0x01);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WriteCommand>
 26e:	08 95       	ret

00000270 <TWI_Init>:

u8	TWI_Status(void);

void TWI_Init(void){
	/*****_MASTER_MODE_*****/
	TWBR = 12; //FSCL = 400 KHz
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	80 b9       	out	0x00, r24	; 0
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
